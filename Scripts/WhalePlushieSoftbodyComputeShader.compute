// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float3> VertexBuffer;
RWStructuredBuffer<float3> SoftbodyVertexBuffer;
RWStructuredBuffer<float3> SoftbodyDisplacementBuffer;
RWStructuredBuffer<float3> DeformedVertexBuffer;
float4 DeformationFactors;
float DeformationScale;
int VertexCount;
int SoftbodyVertexCount;

[numthreads(16, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= VertexCount)
        return;

    for (int i = 0; i < SoftbodyVertexCount; i++)
    {
        float3 displacement = DeformationScale * SoftbodyDisplacementBuffer[i];
        float3 offset = VertexBuffer[id.x] - SoftbodyVertexBuffer[i] - displacement;
        DeformedVertexBuffer[id.x] += displacement / (DeformationFactors.x * pow(abs(DeformationFactors.y + length(offset)), DeformationFactors.z));
    }
}